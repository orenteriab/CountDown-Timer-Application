{"version":3,"sources":["Halfway.js","util.js","TimeDisplay.js","TimeInput.js","TimeSpeed.js","App.js","index.js"],"names":["SoundNotification","source","process","Audio","play","Halfway","time","proposedTime","started","timeProgress","parseInt","timesUpOrNull","label","labelRendering","className","makeTimeUnitDisplayable","unit","String","TimeDisplay","run","onCountdownClick","stepControlIcon","timerClass","join","trim","stepControlClass","formattedTime","rawSeconds","isNaN","minutes","Math","floor","seconds","displayableMinutes","displayableSeconds","convertRawTime","onClick","icon","timeFormatRegex","TimeInput","onCountdownChange","onStartClick","isButtonDisabled","test","countdownValue","type","placeholder","onChange","disabled","value","isSpeedActive","speed","comparingSpeed","TimeSpeed","onSpeedChange","isOneActive","isOneAndAHalfActive","isTwoActive","speedChangeClick","Function","library","add","faPlayCircle","faPauseCircle","dom","watch","initialState","basePace","actualPace","App","state","bind","timeout","clickable","clearTimeout","setState","evt","this","currentTarget","countdownZero","setTimeout","PureComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b928c24.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SoundNotification = {\n  apply() {\n    const source = `${process.env.PUBLIC_URL}/notification.mp3`;\n    const audio = new Audio(source);\n    return audio.play();\n  }\n};\n\n/**\n * This component is responsible for the notification of\n * when the time is past halfway.\n * @typedef {{\n *  time: number,\n *  proposedTime: string,\n *  started: boolean\n * }} Props\n * @param {Props} props\n */\nconst Halfway = ({ time, proposedTime, started }) => {\n  const timeProgress = time / (parseInt(proposedTime) * 60);\n  const isProgressHalfOrLess = timeProgress <= 0.5;\n  const timesUpOrNull = proposedTime === '0' ? 'Time\\'s up!' : null;\n  const label = started && isProgressHalfOrLess ? 'More than halfway there!' : timesUpOrNull;\n  const labelRendering = label !== null ? (<span>{label}</span>) : null;\n\n  if (timesUpOrNull) {\n    SoundNotification.apply();\n  }\n\n  return (\n    <div className=\"halfway-container\">\n      {labelRendering}\n    </div>\n  );\n};\n\nexport default Halfway;","/**\n * If a number is passed then, format it to show in\n * the display.\n * @param {number} unit\n */\nconst makeTimeUnitDisplayable = (unit) => {\n  return unit > 9 ? String(unit) : `0${unit}`;\n};\n\n/**\n * It converts the number of seconds to a formatted\n * `MM:SS` string.\n * @param {number} rawSeconds\n * @returns {string} A formatted string\n */\nexport const convertRawTime = (rawSeconds) => {\n  if (isNaN(rawSeconds)) return rawSeconds;\n\n  const minutes = Math.floor(rawSeconds / 60);\n  const seconds = rawSeconds - (minutes * 60);\n  const displayableMinutes = makeTimeUnitDisplayable(minutes);\n  const displayableSeconds = makeTimeUnitDisplayable(seconds);\n  return `${displayableMinutes}:${displayableSeconds}`;\n};\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { convertRawTime } from './util';\n\n/**\n * This component is responsible for rendering the remaining\n * time, and stop/pause the countdown.\n * @typedef {{\n *  run: boolean,\n *  started: boolean,\n *  time: number,\n *  onCoundownClick: () => void\n * }} Props\n * @param {Props} props\n */\nconst TimeDisplay = ({ run, started, time, onCountdownClick }) => {\n  const countdownIcon = !run ? 'play-circle' : 'pause-circle';\n  const stepControlIcon = ['far', countdownIcon];\n  const twentySecondsClass = started && (time < 21) ? 'twenty-seconds' : '';\n  const blinkyClass = started && (time < 11) ? 'blinky' : '';\n  const timerClass = [twentySecondsClass, blinkyClass].join(' ').trim() || null;\n  const stepControlClass = ['step-control', !started ? 'disabled' : ''].join(' ').trim();\n  const formattedTime = convertRawTime(time);\n\n  return (\n    <div className=\"time-display\">\n      <span className={timerClass}>{formattedTime}</span>\n      <div className={stepControlClass} onClick={onCountdownClick}>\n        <FontAwesomeIcon icon={stepControlIcon} />\n      </div>\n    </div>\n  );\n};\n\nexport default TimeDisplay;\n","import React from 'react';\n\n/** Regex to validate the time is entered in the right */\nconst timeFormatRegex = /^\\d+$/;\n\n/**\n * This component is reponsible for handling the time input.\n * @typedef {{\n *  onCountdownChange: (evt: import('react').SyntheticEvent) => void,\n *  started: boolean,\n *  propsedTime: string,\n *  onStartClick: () => void,\n * }} Props\n * @param {Props} props\n */\nconst TimeInput = ({ onCountdownChange, started, proposedTime, onStartClick }) => {\n  const canStart = timeFormatRegex.test(proposedTime) && (parseInt(proposedTime * 60) > 0);\n  const isButtonDisabled = !canStart || started;\n  const countdownValue = started || proposedTime === '0' ? '' : proposedTime;\n\n  return (\n    <div className=\"time-input-container\">\n      <span className=\"countdown-label\">Countdown:</span>\n      <input\n        className=\"countdown-input\"\n        type=\"text\"\n        placeholder=\"(Min)\"\n        onChange={onCountdownChange}\n        disabled={started}\n        value={countdownValue}\n      />\n      <button\n        className=\"countdown-button\"\n        onClick={onStartClick}\n        disabled={isButtonDisabled}>\n        START\n      </button>\n    </div>);\n};\n\nexport default TimeInput;\n","import React from 'react';\n\n/**\n * Verifies it the speed of the button is the one\n * active.\n * @typedef {(1 | 1.5 | 2)} Speed\n * @param {boolean} started\n * @param {Speed} speed\n * @param {Speed} comparingSpeed\n */\nconst isSpeedActive = (started, speed, comparingSpeed) => {\n  return started && speed === comparingSpeed ? 'active' : null;\n}\n\n/**\n * This component is responsible for rendering the\n * speed control on the countdown.\n * @typedef {{\n *  started: boolean,\n *  speed: (1 | 1.5 | 2),\n *  onSpeedChange: (speed: number) => () => void,\n *  run: boolean\n * }} Props\n * @param {Props} props\n */\nconst TimeSpeed = ({ started, speed, onSpeedChange, run}) => {\n  const isOneActive = isSpeedActive(started, speed, 1);\n  const isOneAndAHalfActive = isSpeedActive(started, speed, 1.5);\n  const isTwoActive = isSpeedActive(started, speed, 2);\n  const speedChangeClick = run ? onSpeedChange : Function;\n\n  return (\n    <div className=\"time-speed-container\">\n      <button className={isOneActive} onClick={speedChangeClick(1)} disabled={!run}>1x</button>\n      <button className={isOneAndAHalfActive} onClick={speedChangeClick(1.5)} disabled={!run}>1.5x</button>\n      <button className={isTwoActive} onClick={speedChangeClick(2)} disabled={!run}>2x</button>\n    </div>\n  );\n};\n\nexport default TimeSpeed;\n","import { library, dom } from '@fortawesome/fontawesome-svg-core'\nimport { faPlayCircle, faPauseCircle } from '@fortawesome/free-regular-svg-icons';\nimport Halfway from './Halfway';\nimport React, { PureComponent } from 'react';\nimport TimeDisplay from './TimeDisplay';\nimport TimeInput from './TimeInput';\nimport TimeSpeed from './TimeSpeed';\nimport './App.css';\n\nlibrary.add(faPlayCircle, faPauseCircle);\ndom.watch();\n\nconst initialState = {\n  time: 0,\n  run: false,\n  basePace: 1000,\n  actualPace: 1000,\n  proposedTime: '',\n  started: false,\n  speed: 1,\n};\n\nclass App extends PureComponent {\n  constructor() {\n    super();\n    this.state = initialState;\n    this.onCountdownClick = this.onCountdownClick.bind(this);\n    this.onSpeedChange = this.onSpeedChange.bind(this);\n    this.onCountdownChange = this.onCountdownChange.bind(this);\n    this.onStartClick = this.onStartClick.bind(this);\n    this.timeout = null;\n  }\n\n  /**\n   * As divs are clickable on disable, it's needed\n   * to manage the countdown event.\n   * @param {boolean} clickable\n   */\n  onCountdownClick(clickable) {\n    return () => {\n      if (clickable) {\n        const { run } = this.state;\n        clearTimeout(this.timeout);\n        this.setState(state => ({ ...state, run: !run }));\n      }\n    };\n  }\n\n  /**\n   * Handles the speed change\n   * @param {number} speed\n   */\n  onSpeedChange(speed) {\n    return () => {\n      const { basePace } = this.state;\n      const actualPace = Math.floor(basePace / speed);\n      this.setState(state => ({ ...state, actualPace, speed }));\n    };\n  }\n\n  /**\n   * Handles the input change event.\n   * @param {React.SyntheticEvent} evt\n   */\n  onCountdownChange(evt) {\n    const { started } = this.state;\n\n    if (!started) {\n      const proposedTime = evt.currentTarget.value;\n      this.setState(state => ({ ...state, proposedTime }));\n    }\n  }\n\n  onStartClick() {\n    const { proposedTime } = this.state;\n\n    if (!isNaN(proposedTime)) {\n      const time = parseInt(proposedTime) * 60;\n      this.setState(state => ({\n        ...state,\n        time,\n        run: true,\n        started: true,\n      }));\n    }\n  }\n\n  componentDidUpdate() {\n    const { time, actualPace, run } = this.state;\n    const countdownZero = time === 0;\n\n    if (run && !countdownZero) {\n      this.timeout = setTimeout(\n        () => this.setState(state => ({ ...state, time: time - 1 })),\n        actualPace\n      );\n    } else if (!countdownZero) {\n      this.setState(state => ({ ...state, run: false }));\n    } else if (run) {\n      this.setState({ ...initialState, proposedTime:'0' });\n    }\n  }\n\n  render() {\n    const { time, run, started, proposedTime, speed } = this.state;\n    const onCountdownClick = this.onCountdownClick(started);\n\n    return (\n      <div className=\"App\">\n        <TimeInput\n          onCountdownChange={this.onCountdownChange}\n          started={started}\n          proposedTime={proposedTime}\n          onStartClick={this.onStartClick} />\n        <Halfway\n          time={time}\n          proposedTime={proposedTime}\n          started={started} />\n        <TimeDisplay\n          run={run}\n          started={started}\n          time={time}\n          onCountdownClick={onCountdownClick} />\n        <TimeSpeed\n          started={started}\n          speed={speed}\n          onSpeedChange={this.onSpeedChange}\n          run={run} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}